using Azure;
using Azure.Search.Documents.Models;
using Dfe.Data.SearchPrototype.Common.Mappers;
using Dfe.Data.SearchPrototype.Infrastructure.Mappers;
using Dfe.Data.SearchPrototype.Infrastructure.Options;
using Dfe.Data.SearchPrototype.Infrastructure.Tests.TestDoubles;
using Dfe.Data.SearchPrototype.SearchForEstablishments;
using Dfe.Data.SearchPrototype.SearchForEstablishments.Models;
using FluentAssertions;
using Xunit;

namespace Dfe.Data.SearchPrototype.Infrastructure.Tests;

public sealed class CognitiveSearchServiceAdapterAndMapperTests
{
    private ISearchOptionsFactory _mockSearchOptionsFactory;
    private IMapper<Pageable<SearchResult<Establishment>>, EstablishmentResults> _searchResponseMapper;
    private IMapper<Dictionary<string, IList<Azure.Search.Documents.Models.FacetResult>>, EstablishmentFacets> _facetsMapper;

    public CognitiveSearchServiceAdapterAndMapperTests()
    {
        _mockSearchOptionsFactory = SearchOptionsFactoryTestDouble.MockSearchOptionsFactory();
        _searchResponseMapper = new PageableSearchResultsToEstablishmentResultsMapper(
            new AzureSearchResultToEstablishmentMapper(
                new AzureSearchResultToAddressMapper()));
        _facetsMapper = new AzureFacetResultToEstablishmentFacetsMapper();
    }

    [Fact]
    public async Task Search_WithValidSearchContext_ReturnsResults()
    {
        // arrange
        var establishmentSearchResults = new SearchResultFakeBuilder()
                .WithSearchResults()
                .Create();
        var facetResults = new FacetsResultsFakeBuilder()
                .WithAutoGeneratedFacets()
                .Create();
        var mockService = new SearchServiceMockBuilder()
            .WithSearchOptions("SearchKeyword", "TargetCollection")
            .WithSearchResults(establishmentSearchResults)
            .WithFacets(facetResults)
            .Create();

        ISearchServiceAdapter cognitiveSearchServiceAdapter = new CognitiveSearchServiceAdapter<Establishment>(
            mockService,
            _mockSearchOptionsFactory,
            _searchResponseMapper,
            _facetsMapper);

        // act
        SearchResults? response =
            await cognitiveSearchServiceAdapter.SearchAsync(
                new SearchContext(
                    searchKeyword: "SearchKeyword",
                    targetCollection: "TargetCollection"));

        // assert
        response.Should().NotBeNull();
        response.Establishments.Should().NotBeNull();
        response.Establishments!.Establishments.Count().Should().Be(establishmentSearchResults.Count);
        response.Facets.Should().NotBeNull();
        response.Facets!.Facets.Count().Should().Be(facetResults.Count());
    }

    [Fact]
    public async Task Search_WithNoFacetsReturned_ReturnsNullFacets()
    {
        // arrange
        var mockService = new SearchServiceMockBuilder()
            .WithSearchOptions("SearchKeyword", "TargetCollection")
            .WithSearchResults(
                new SearchResultFakeBuilder()
                .WithSearchResults()
                .Create())
            .Create();
        var mockSearchOptionsFactory = SearchOptionsFactoryTestDouble.MockSearchOptionsFactory();

        ISearchServiceAdapter cognitiveSearchServiceAdapter = new CognitiveSearchServiceAdapter<Establishment>(
                mockService,
                mockSearchOptionsFactory,
                _searchResponseMapper,
                _facetsMapper);

        // act
        SearchResults? response =
            await cognitiveSearchServiceAdapter.SearchAsync(
                new SearchContext(
                    searchKeyword: "SearchKeyword",
                    targetCollection: "TargetCollection"));

        // assert
        response.Should().NotBeNull();
        response.Facets.Should().BeNull();
    }

    [Fact]
    public async Task Search_WithNoResultsReturned_ReturnsEmptyResults()
    {
        // arrange
        var mockService = new SearchServiceMockBuilder()
            .WithSearchOptions("SearchKeyword", "TargetCollection")
            .WithSearchResults(
                new SearchResultFakeBuilder()
                .WithEmptySearchResult()
                .Create())
            .Create();

        ISearchServiceAdapter cognitiveSearchServiceAdapter = new CognitiveSearchServiceAdapter<Establishment>(
                mockService,
                _mockSearchOptionsFactory,
                _searchResponseMapper,
                _facetsMapper);

        // act.
        var response = await cognitiveSearchServiceAdapter.SearchAsync(new SearchContext(
                            searchKeyword: "SearchKeyword",
                            targetCollection: "TargetCollection"));

        // assert
        response.Should().NotBeNull();
        response.Establishments.Should().NotBeNull();
        response.Establishments!.Establishments.Should().BeEmpty();
    }
}
